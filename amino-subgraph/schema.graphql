type ExistingTokenId @entity {
  id: ID!
  tokenId: BigInt!
  mintTimestamp: BigInt
  buyer: Bytes
  sizeInCC: BigInt!
  price: BigInt
  donor: Bytes
  bioBank: Bytes
  hlaHashes: HlaHaplotypesHashed
}

type PendingSale @entity {
  id: ID!
  tokenId: BigInt!
  escrowedPayment: BigInt!
  status: String!
  completed: Boolean!
}

type NewListing @entity {
  id: ID!
  tokenId: BigInt!
  sizeInCC: BigInt!
  price: BigInt!
  donor: Bytes!
  bioBank: Bytes!
}

type SaleInitiated @entity {
  id: ID!
  buyer: Bytes!
  tokenId: BigInt!
  sizeInCC: BigInt!
  donor: Bytes!
  escrowedPayment: BigInt!
}

type ListingCanceled @entity {
  id: ID!
  tokenId: BigInt!
}

type DeliveryStatusChanged @entity {
  id: ID!
  tokenId: BigInt!
  status: String!
}

type SaleCompleted @entity {
  id: ID!
  timestamp: BigInt!
  transactionHash: Bytes!
  buyer: Bytes!
  tokenId: BigInt!
  donor: Bytes!
  salePrice: BigInt!
  donorIncentive: BigInt!
  protocolFee: BigInt!
}

type SaleRefunded @entity {
  id: ID!
  tokenId: BigInt!
  refundTotal: BigInt!
}

type HlaHaplotypesHashed @entity(immutable: true) {
  id: ID!
  hlaHashed_A: Bytes! # bytes32
  hlaHashed_B: Bytes! # bytes32
  hlaHashed_C: Bytes! # bytes32
  hlaHashed_DPB: Bytes! # bytes32
  hlaHashed_DRB: Bytes! # bytes32
}

type StemCellDonationTokenized @entity {
  id: ID!
  timestamp: BigInt!
  donor: Bytes!
  hlaHashes: HlaHaplotypesHashed!
  tokenIds: [BigInt!]!
  amounts: [BigInt!]!
}
